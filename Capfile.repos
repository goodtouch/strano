require 'capistrano_colors'
colorize [
 { :match => /command finished/,       :color => :hide,      :prio => 10 },
 { :match => /executing command/,      :color => :blue,      :prio => 10, :attribute => :underscore },
 { :match => /^transaction: commit$/,  :color => :magenta,   :prio => 10, :attribute => :blink },
 { :match => /git/,                    :color => :white,     :prio => 20, :attribute => :reverse },
]

# logs the command then executes it locally.
# returns the command output as a string
def run_locally(cmd)
  logger.trace "executing locally: #{cmd.inspect}" if logger
  output_on_stdout = nil
  elapsed = Benchmark.realtime do
    Bundler.with_clean_env do
      output_on_stdout = `#{cmd}`
    end
  end
  if $?.to_i > 0 # $? is command exit code (posix style)
    raise Capistrano::LocalArgumentError, "Command #{cmd} returned status code #{$?}"
  end
  logger.trace "command finished in #{(elapsed * 1000).round}ms" if logger
  output_on_stdout
end
